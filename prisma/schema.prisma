// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// User model representing registered users
model User {
  id                  String             @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  email               String             @unique
  password            String
  profilePic          String?
  securityQuestion    SecurityQuestion?  @relation(fields: [securityQuestionId], references: [id])
  securityQuestionId  String?            @unique @db.ObjectId
  forgotPasswordOTP   ForgotPasswordOTP? @relation(fields: [forgotPasswordOTPId], references: [id])
  forgotPasswordOTPId String?            @db.ObjectId
  sobriety            String
  journals            Journal[]
}

// SecurityQuestion model for storing security questions
model SecurityQuestion {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  question String @unique // Ensure questions are unique
  answer   String // Store the answer to the security question
  user     User? // Establishes a reverse one-to-one relationship with the User model
}

// PasswordResetToken model for password reset functionality
model PasswordResetToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String // Reference to the user ID
  token     String   @unique // Ensure tokens are unique
  createdAt DateTime @default(now()) // Timestamp of token creation
}

// ForgotPasswordOTP model for storing forgot password OTPs
model ForgotPasswordOTP {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique // Reference to the user ID, ensure only one OTP per user
  otp       Int      @unique // One-time password
  createdAt DateTime @default(now()) // Timestamp of OTP creation
  User      User[]
}

// Journal model for storing daily journals
model Journal {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  userId      String     @db.ObjectId // Reference to the user ID
  journalDate DateTime // Date of the journal entry
  questions   Question[] // Establishes a one-to-many relationship with the Question model
  isAnswered  Boolean
  User        User       @relation(fields: [userId], references: [id])
}

// Question model for storing daily questions
model Question {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  journalId      String  @db.ObjectId // Reference to the journal ID
  questionText   String
  answer String?
  isAnswered     Boolean @default(false)
  questionType   String
  journal        Journal @relation(fields: [journalId], references: [id])
}

enum DayOFWeek {
  monday
  tuesday
  wednesday
  thursday
  friday
  saturday
  sunday
}
